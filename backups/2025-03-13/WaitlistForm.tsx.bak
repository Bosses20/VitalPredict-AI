"use client";

import { useState } from 'react';
import Button from '@/components/Button';
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { motion } from 'framer-motion';
import { toast, Toaster } from 'react-hot-toast';

const schema = z.object({
  email: z.string().email('Please enter a valid email address'),
  interests: z.array(z.string()).optional(),
});

type WaitlistFormData = z.infer<typeof schema>;

interface WaitlistFormProps {
  onClose?: () => void;
  className?: string;
}

export default function WaitlistForm({ onClose, className = '' }: WaitlistFormProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showInterests, setShowInterests] = useState(false);
  
  const { register, handleSubmit, reset, formState: { errors } } = useForm<WaitlistFormData>({
    resolver: zodResolver(schema),
    defaultValues: {
      interests: [],
    },
  });

  const onSubmit = async (data: WaitlistFormData) => {
    try {
      setIsSubmitting(true);
      
      // Using the same API endpoint as the subscription form
      const response = await fetch('/api/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...data,
          source: 'waitlist',
        }),
      });

      const result = await response.json();

      if (result.success) {
        toast.success(
          <div>
            <p>Thank you for joining our waitlist!</p>
            <p className="text-sm mt-1">We'll keep you updated on all future opportunities.</p>
          </div>,
          { duration: 5000 }
        );
        reset();
        if (onClose) {
          setTimeout(() => {
            onClose();
          }, 2000);
        }
      } else {
        toast.error(result.message || "Something went wrong. Please try again.");
      }
    } catch (error) {
      toast.error("Failed to submit. Please try again later.");
      console.error('Submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className={`bg-black/90 backdrop-blur-md border border-white/10 rounded-xl p-6 ${className}`}>
      <div className="text-center mb-6">
        <h3 className="text-xl md:text-2xl font-bold text-white mb-2">
          Can't commit to $200 right now?
        </h3>
        <p className="text-neutral-300">
          Join {5321} diabetics on our waitlist for future opportunities
        </p>
      </div>
      
      <form onSubmit={handleSubmit(onSubmit)}>
        <div className="mb-4">
          <input 
            type="email" 
            placeholder="Enter your email" 
            className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-3 text-white placeholder:text-neutral-400 focus:border-lime-400/50 outline-none transition"
            disabled={isSubmitting}
            {...register("email")}
          />
          {errors.email && (
            <p className="text-red-400 text-sm mt-1">{errors.email.message}</p>
          )}
        </div>

        {!showInterests ? (
          <div className="text-center mb-4">
            <button 
              type="button"
              className="text-lime-400 text-sm hover:underline focus:outline-none"
              onClick={() => setShowInterests(true)}
            >
              I'm interested in specific opportunities â†’
            </button>
          </div>
        ) : (
          <div className="mb-4 space-y-2">
            <p className="text-sm text-white mb-2">I'm interested in: (select all that apply)</p>
            <div className="flex flex-wrap gap-2">
              <label className="flex items-center gap-2 bg-white/5 hover:bg-white/10 px-3 py-2 rounded-lg cursor-pointer transition">
                <input 
                  type="checkbox" 
                  className="form-checkbox h-4 w-4 text-lime-400 rounded focus:ring-lime-400"
                  value="subsidized_plans" 
                  {...register("interests")}
                />
                <span className="text-sm text-white">Subsidized plans</span>
              </label>
              <label className="flex items-center gap-2 bg-white/5 hover:bg-white/10 px-3 py-2 rounded-lg cursor-pointer transition">
                <input 
                  type="checkbox" 
                  className="form-checkbox h-4 w-4 text-lime-400 rounded focus:ring-lime-400"
                  value="beta_testing" 
                  {...register("interests")}
                />
                <span className="text-sm text-white">Beta testing</span>
              </label>
              <label className="flex items-center gap-2 bg-white/5 hover:bg-white/10 px-3 py-2 rounded-lg cursor-pointer transition">
                <input 
                  type="checkbox" 
                  className="form-checkbox h-4 w-4 text-lime-400 rounded focus:ring-lime-400"
                  value="launch_discounts" 
                  {...register("interests")}
                />
                <span className="text-sm text-white">Launch discounts</span>
              </label>
            </div>
          </div>
        )}

        <Button
          type="submit"
          variant="secondary"
          className="w-full"
          disabled={isSubmitting}
        >
          {isSubmitting ? "Joining..." : "Join Waitlist"}
        </Button>
      </form>
      
      <div className="mt-4 text-center">
        <p className="text-xs text-neutral-400">
          No spam, ever. We'll only contact you about VitalPredict opportunities.
        </p>
      </div>
      
      <Toaster position="bottom-center" />
    </div>
  );
}
